% EL844 workshop 2 - bfrd2

function [out] = navg5(X)
%NAVG5 neighbourhood averaging technique on a 5x5

% deal with the image edges by adding a border of 127 around the original
% matrix
[row, col] = size(X);
tmp = 127 * ones(row+4, col+4, 'uint8');
for x=3: row+2
    for y=3: col+2
        tmp(x, y) = X(x-2, y-2);
    end
end

nb_nbr = 25;  % number of neighboors (current pixel included)

% apply filter
for x=3: row+2
    for y=3: col+2
        out(x-2, y-2) = ...
              tmp(x-2, y-2)/nb_nbr ...
            + tmp(x-2, y-1)/nb_nbr ...
            + tmp(x-2, y)/nb_nbr ...
            + tmp(x-2, y+1)/nb_nbr ...
            + tmp(x-2, y+2)/nb_nbr ...
            + tmp(x-1, y-2)/nb_nbr ...
            + tmp(x-1, y-1)/nb_nbr ...
            + tmp(x-1, y)/nb_nbr ...
            + tmp(x-1, y+1)/nb_nbr ...
            + tmp(x-1, y+2)/nb_nbr ...
            + tmp(x, y-2)/nb_nbr ...
            + tmp(x, y-1)/nb_nbr ...
            + tmp(x, y)/nb_nbr ...
            + tmp(x, y+1)/nb_nbr ...
            + tmp(x, y+2)/nb_nbr ...
            + tmp(x+1, y-2)/nb_nbr ...
            + tmp(x+1, y-1)/nb_nbr ...
            + tmp(x+1, y)/nb_nbr ...
            + tmp(x+1, y+1)/nb_nbr ...
            + tmp(x+1, y+2)/nb_nbr ...
            + tmp(x+2, y-2)/nb_nbr ...
            + tmp(x+2, y-1)/nb_nbr ...
            + tmp(x+2, y)/nb_nbr ...
            + tmp(x+2, y+1)/nb_nbr ...
            + tmp(x+2, y+2)/nb_nbr;
    end
end